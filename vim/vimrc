set nocompatible
set tabstop=2 softtabstop=2 expandtab shiftwidth=2 smarttab

" Enable syntax highlighting.
syntax on

" File-type highlighting and configuration.
" Run :filetype (without args) to see what you may have
" to turn on yourself, or just set them all to be sure.
filetype on
filetype plugin on
filetype indent on

set autoindent smartindent
set showmode

" Show line numbers.
set number

" Do not wrap lines.
set nowrap

" Show matching brackets.
set showmatch

" Always show status line.
set laststatus=2

" Mouse in all modes
set mouse=a

set history=1000
set matchtime=0
" The “Press ENTER or type command to continue” prompt is jarring and usually unnecessary. You can shorten command-line text and other info tokens with.
set shortmess=atI


" Now in the bottom right corner of the status line there will be something like: 529, 35 68%, representing line 529, column 35, about 68% of the way to the end.
set ruler
set showcmd

" A running gvim will always have a window title, but when vim is run within an xterm, by default it inherits the terminal’s current title.
set title


" Search options
" Highlight search terms
set hlsearch
set incsearch
set ignorecase
set smartcase


" Blink if there is an error
set visualbell
set noerrorbells
set printoptions=paper:letter

" Make backspace delete lots of things
set backspace=indent,eol,start

set backupdir=/tmp//,.
set directory=/tmp//,.
set undodir=/tmp//,.

set backspace=2   " Backspace deletes like most programs in insert mode

" Decrease maximum column length in which to search for syntax items
set synmaxcol=200

call plug#begin('~/.vim/vim-plug')

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'HerringtonDarkholme/yats.vim'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
"Plug 'kien/ctrlp.vim'
Plug 'tomasiser/vim-code-dark'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'
"Plug 'rickhowe/diffchar.vim'
Plug 'airblade/vim-gitgutter'
"Plug 'ianks/vim-tsx'
"Plug 'Quramy/tsuquyomi'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"Plug 'christoomey/vim-tmux-navigator'
Plug 'scrooloose/nerdcommenter'
Plug 'sheerun/vim-polyglot'
"Plug 'leafgarland/typescript-vim'
Plug 'tpope/vim-surround'
"Plug 'maralla/completor.vim'
"Plug 'BrandonRoehl/auto-omni'
Plug 'josudoey/vim-eslint-fix'
Plug 'w0rp/ale'
Plug 'alvan/vim-closetag'
Plug 'jiangmiao/auto-pairs'
Plug 'dyng/ctrlsf.vim'
Plug '1995parham/vim-zimpl'
Plug 'Yggdroot/indentLine'
Plug 'gcmt/wildfire.vim'
Plug 'janko/vim-test'
Plug 'benmills/vimux'
Plug 'francoiscabrol/ranger.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/seoul256.vim'
Plug 'junegunn/limelight.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'vim-ruby/vim-ruby'

if !empty(globpath("$HOME", "/.plugins.vim"))
  source $HOME/.plugins.vim
endif
call plug#end()

" Enable TOC window auto-fit
let g:vim_markdown_toc_autofit = 1
let g:vim_markdown_folding_disabled = 1
set nofoldenable

colorscheme codedark
let g:airline_theme = 'codedark'

highlight GitGutterAdd    ctermfg=2
highlight GitGutterChange ctermfg=3
highlight GitGutterDelete ctermfg=1

let g:gitgutter_map_keys = 0

autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript

" set filetypes as typescript.tsx
autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx

let g:NERDCustomDelimiters = { 'javascript.tsx': { 'left': '//', 'leftAlt': '{/*', 'rightAlt': '*/}' } }
let g:NERDCustomDelimiters = { 'typescript.tsx': { 'left': '//', 'leftAlt': '{/*', 'rightAlt': '*/}' } }

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#left_sep = '|'
let g:airline#extensions#tabline#left_alt_sep = '|'
let airline#extensions#tabline#tabs_label = ''
let airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_close_button = 0

set omnifunc=syntaxcomplete#Complete
set completeopt=noinsert,menuone,menu

" Allow us to use Ctrl-s and Ctrl-q as keybinds
silent !stty -ixon

" Restore default behaviour when leaving Vim.
autocmd VimLeave * silent !stty ixon

let g:ale_linters = {
      \   'javascript': ['eslint'],
      \   'typescript': ['tsserver', 'eslint']
      \}

let g:ale_fixers = {
      \   '*': ['remove_trailing_lines', 'trim_whitespace'],
      \    'javascript': ['eslint'],
      \    'typescript': ['eslint', 'prettier'],
      \    'scss': ['prettier'],
      \    'html': ['prettier']
      \}

let g:ale_fix_on_save = 1

if has('macunix')
  set clipboard=unnamed
else
  set clipboard=unnamedplus
endif

let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.tsx, *.jsx'
let g:ctrlsf_auto_close = {
      \ "normal" : 0,
      \ "compact": 0
      \}
let g:ctrlsf_default_view_mode = 'compact'

" from https://stackoverflow.com/a/54961319
function! AleIgnore()
  let codes = []
  for d in getloclist(0)
    if (d.lnum==line('.'))
      let code = split(d.text,':')[0]
      call add(codes, code)
    endif
  endfor
  if len(codes)
    exe 'normal O/* eslint-disable-next-line ' . join(codes, ', ') . ' */'
  endif
endfunction

autocmd BufRead,BufNewFile *.zpl set filetype=zimpl

" see https://unix.stackexchange.com/a/383044
" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
set autoread
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

let test#strategy = "vimux"

let g:ranger_map_keys = 0

source $HOME/.dotfiles/vim/nerd-tree.vim
source $HOME/.dotfiles/vim/coc.vim
source $HOME/.dotfiles/vim/mappings.vim

" Use nicer highlight colors
hi Search ctermfg=black ctermbg=228
set cursorline
hi CursorLineNR ctermfg=39
hi CursorColumn ctermbg=238

" Optimize performance, use when necessary
"https://vi.stackexchange.com/questions/10495/most-annoying-slow-down-of-a-plain-text-editor

hi diffAdded ctermfg=41
hi diffRemoved ctermfg=Red

hi diffFile cterm=NONE ctermfg=39
hi gitcommitDiff cterm=NONE ctermfg=39
hi diffIndexLine cterm=NONE ctermfg=39
hi diffLine cterm=NONE ctermfg=39

" Move focus to newly created splits
set splitbelow
set splitright

" Allow matching ruby blocks with '%'
runtime macros/matchit.vim
