let dotfilesTheme = exists('$DOTFILES_THEME') ? $DOTFILES_THEME : 'lcars'

set nocompatible
set tabstop=2 softtabstop=2 expandtab shiftwidth=2 smarttab

syntax on

filetype on
filetype plugin on
filetype indent on

set autoindent smartindent
set showmode

" Show line numbers.
set number

" Do not wrap lines.
set nowrap

set nostartofline

" Show matching brackets.
set showmatch

" Always show status line.
set laststatus=2

" Mouse in all modes
set mouse=a

set history=1000
set matchtime=0
" The “Press ENTER or type command to continue” prompt is jarring and usually unnecessary. You can shorten command-line text and other info tokens with.
set shortmess=atI

set ruler
set showcmd

" A running gvim will always have a window title, but when vim is run within an xterm, by default it inherits the terminal’s current title.
set title

" Search options
set hlsearch
set incsearch
set ignorecase
set smartcase


" Blink if there is an error
set visualbell
set noerrorbells

" Disable visual bell
set t_vb=

" Not neovim compatible
"set printoptions=paper:letter

set backupdir=~/.vim/.backup/,/tmp//,.
set directory=~/.vim/.swp/,/tmp//,.
set undodir=~/.vim/.undo/,/tmp//,.

if !empty($DOTFILES_NVIM)
  set undodir=~/.config/nvim/.undo/,/tmp//,.
endif

" Maintain undo history between sessions
set undofile

" Set backspace to delete as usual in insert mode
set backspace=indent,eol,start

" Decrease maximum column length in which to search for syntax items
set synmaxcol=200

" Disable folding
set nofoldenable

" Enable auto completion
set omnifunc=syntaxcomplete#Complete
set completeopt=noinsert,menuone,menu

" Use system clipboard
if has('macunix')
  set clipboard=unnamed
else
  set clipboard=unnamedplus
endif

" see https://unix.stackexchange.com/a/383044
" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
set autoread
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

function! s:ExecuteSelection() range
  let linesWithoutEmpty = filter(copy(getline(a:firstline, a:lastline)), 'len(v:val)')
  execute "!"."clear && ".join(linesWithoutEmpty, " && ")
endfunction
command! -range ExecuteSelection <line1>,<line2>call <SID>ExecuteSelection()

source $HOME/.dotfiles/vim/basic/mappings.vim

colorscheme codedark

" Use nicer highlight colors
hi Search ctermfg=black ctermbg=228
set cursorline
hi CursorLine ctermbg=237
hi CursorLineNR ctermfg=39
hi CursorColumn ctermbg=238

if dotfilesTheme =~ '-light$'
  set background=light
  colorscheme PaperColor
  hi CursorLine ctermbg=251
endif

augroup BgHighlight
    autocmd!
    autocmd WinEnter * set cursorline
    autocmd WinLeave * set nocursorline
augroup END
" Optimize performance, use when necessary
"https://vi.stackexchange.com/questions/10495/most-annoying-slow-down-of-a-plain-text-editor

hi diffAdded ctermfg=41
hi diffRemoved ctermfg=Red

hi diffFile cterm=NONE ctermfg=39
hi gitcommitDiff cterm=NONE ctermfg=39
hi diffIndexLine cterm=NONE ctermfg=39
hi diffLine cterm=NONE ctermfg=39

" Move focus to newly created splits
set splitbelow
set splitright

" Transparent background (so use terminal background)
hi Normal ctermbg=NONE
hi EndOfBuffer ctermbg=NONE
hi LineNr ctermbg=NONE
hi SignColumn ctermbg=NONE

command! CopyFilename let @* = expand("%")

" Show possible commands after tab when entering command
set wildmenu

" Always show at least ten lines above/below the cursor
set scrolloff=10

function! s:SynStack()
  for synItem in synstack(line("."), col("."))
    let synItemId = synIDtrans(synItem)
    let itemName = synIDattr(synItem, "name")
    let idName = synIDattr(synItemId, "name")
    echo itemName "->" idName
  endfor
endfunction
command! SynStack call <SID>SynStack()

command! SearchCount echo searchcount({ "maxcount": 0 }).total

"hybrid line numbers
set number relativenumber

set wildoptions=pum
set shiftround

function! s:QuickMemo()
  let path = $HOME . '/vim-quick-memo/'
  let filePath = expand("%:t")

  if !empty(filePath)
    w
    return
  endif

  if !isdirectory(path)
    call mkdir(path)
  endif

  let firstChars = ''
  let firstLine = getline(1)
  if !empty(firstLine)
    let firstChars = '--' . substitute(firstLine[:29], '/', ' ', 'g')
  endif

  execute('w ' . path . strftime('%Y-%m-%d-%H:%M:%S') . firstChars . '.md')
endfunction
command! QuickMemo call <SID>QuickMemo()
