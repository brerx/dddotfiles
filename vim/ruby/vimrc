let g:coc_global_extensions = g:coc_global_extensions + ['coc-solargraph', 'coc-db']

function! s:AlternateSafe()
  try
    A
  catch /^Vim\%((\a\+)\)\=:E345:/
    let path = matchstr(v:exception, '.*"\zs.*\ze".*')
    execute 'e ' . path
  endtry
endfunction

command! AlternateSafe :call <SID>AlternateSafe()

let g:projectionist_heuristics = { ".git/":
      \ { "lib/web/*_controller.rb": { "alternate": [ "spec/web/{}_request_spec.rb", 
      \                                               "spec/web/{}_get_request_spec.rb", 
      \                                               "spec/web/{}_post_request_spec.rb", 
      \                                               "spec/web/{}_patch_request_spec.rb", 
      \                                               "spec/web/{}_delete_request_spec.rb"] }, 
      \   "spec/web/*_get_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" },
      \   "spec/web/*_post_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" },
      \   "spec/web/*_patch_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" },
      \   "spec/web/*_delete_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" },
      \   "spec/web/*_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" }}
      \ }

augroup filetype_ruby
    autocmd!
    let rubySynGroups = ["rubyString", "rubyComment"]
    autocmd FileType ruby iab <buffer> <expr> de ExcludeSynGroupAbbr("de", "do<cr>end<esc>O", rubySynGroups)
    autocmd FileType ruby iab <buffer> <expr> it ExcludeSynGroupAbbr("it", "it 'does' do<cr>end<esc>O", rubySynGroups)
    autocmd FileType ruby iab <buffer> <expr> ctx ExcludeSynGroupAbbr("ctx", "context 'with sth' do<cr>end<esc>O", rubySynGroups)
    autocmd FileType ruby iab <buffer> <expr> def ExcludeSynGroupAbbr("def", "def<cr>end<esc>kA", rubySynGroups)
    autocmd FileType ruby iab <buffer> <expr> class ExcludeSynGroupAbbr("class", "class<cr>end<esc>kA", rubySynGroups)
    autocmd FileType ruby iab <buffer> <expr> if ExcludeSynGroupAbbr("if", "if<cr>end<esc>kA", rubySynGroups)
    autocmd FileType ruby iab <buffer> <expr> pry ExcludeSynGroupAbbr("pry", "require 'pry'; binding.pry", rubySynGroups)

augroup END

augroup skeletons_ruby
  autocmd BufNewFile,BufReadPost *_spec\.rb if getline(1,'$') == [''] | 0r $HOME/.dotfiles/vim/ruby/skeletons/spec.rb | endif
  autocmd BufNewFile,BufReadPost *.rb if getline(1,'$') == [''] | 0r $HOME/.dotfiles/vim/ruby/skeletons/ruby.rb | endif
augroup END

let g:BufferNavigatorWidth = 50
let g:BufferNavigatorHighlightRules = [
      \["rubySpecDir", "dir", "spec", "NONE", "106", "NONE", "green"],
      \["rubySpecFile", "file", ".*_spec\.rb", "NONE", "154", "NONE", "green"],
      \]

source $HOME/.dotfiles/vim/ruby/mappings.vim
