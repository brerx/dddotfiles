let g:coc_global_extensions = g:coc_global_extensions + ['coc-solargraph', 'coc-db']

function! s:AlternateSafe()
  try
    A
  catch /^Vim\%((\a\+)\)\=:E345:/
    let path = matchstr(v:exception, '.*"\zs.*\ze".*')
    execute 'e ' . path
  endtry
endfunction

command! AlternateSafe :call <SID>AlternateSafe()

let g:projectionist_heuristics = { ".git/":
      \ { "lib/web/*_controller.rb": { "alternate": [ "spec/requests/{}_request_spec.rb", 
      \                                               "spec/requests/{}_get_request_spec.rb", 
      \                                               "spec/requests/{}_post_request_spec.rb", 
      \                                               "spec/requests/{}_patch_request_spec.rb", 
      \                                               "spec/requests/{}_delete_request_spec.rb"] }, 
      \   "spec/requests/*_get_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" },
      \   "spec/requests/*_post_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" },
      \   "spec/requests/*_patch_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" },
      \   "spec/requests/*_delete_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" },
      \   "spec/requests/*_request_spec.rb": { "alternate": "lib/web/{}_controller.rb" }}
      \ }

augroup filetype_ruby
    autocmd!
    autocmd FileType ruby iab <buffer> de do<cr>end<esc>O
    autocmd FileType ruby iab <buffer> desc describe 'title' do<cr>end<esc>O
    autocmd FileType ruby iab <buffer> it it 'does' do<cr>end<esc>O
    autocmd FileType ruby iab <buffer> ctx context 'with sth' do<cr>end<esc>O
    autocmd FileType ruby iab <buffer> def def<cr>end<esc>kA
    autocmd FileType ruby iab <buffer> class class<cr>end<esc>kA
    autocmd FileType ruby iab <buffer> if if<cr>end<esc>kA
    autocmd FileType ruby iab <buffer> pry require 'pry'; binding.pry
augroup END

augroup skeletons_ruby
  autocmd BufNewFile,BufReadPost *_spec\.rb if getline(1,'$') == [''] | 0r $HOME/.dotfiles/vim/ruby/skeletons/spec.rb | endif
  autocmd BufNewFile,BufReadPost *.rb if getline(1,'$') == [''] | 0r $HOME/.dotfiles/vim/ruby/skeletons/ruby.rb | endif
augroup END

let g:BufferNavigatorWidth = 50
let g:BufferNavigatorHighlightRules = [
      \["rubySpecDir", "dir", "spec", "NONE", "106", "NONE", "green"],
      \["rubySpecFile", "file", ".*_spec\.rb", "NONE", "154", "NONE", "green"],
      \]

" temporary, move to new plugin with sidebar window using vim9script
function! s:TestOutlineOld()
  let describes = execute('g/^\s*describe')
  let contexts = execute('g/^\s*context')
  let its = execute('g/^\s*it')
  let result = describes . contexts . its
  let result = substitute(result, "' do", "", "g")
  let result = substitute(result, "it '", "it ", "g")
  let result = substitute(result, "context '", "", "g")
  let result = substitute(result, "describe '", "", "g")
  echo join(sort(split(result, "\n")), "\n")
endfunction

source $HOME/.dotfiles/vim/ruby/mappings.vim
