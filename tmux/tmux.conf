bind r source-file $HOME/.tmux.conf \; display "Configuration reloaded successfully."
bind v split-window -h -c "#{pane_current_path}"
bind s split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %
bind Tab last-window
bind -n C-y last-window
unbind l
bind F set -g status
unbind -
bind - select-pane -l
unbind n
unbind p
bind Right next-window
bind Left previous-window
bind C new-session -n ''
bind c new-window -n ''
unbind q
unbind <
bind -r < swap-pane -U
unbind >
bind -r > swap-pane -D
bind q display-panes -d 0
unbind w
bind w choose-tree -Zs

bind n new-window -n 'title' "$HOME/.dotfiles/blubb.sh"

unbind C-b
set -g prefix C-a

set -g base-index 1         # start windows numbering at 1
setw -g pane-base-index 1   # make pane numbering consistent with windows


setw -g automatic-rename off # don't rename windows automatically

set -g renumber-windows on  # renumber windows when a window is closed
set -g set-titles on                        # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g status-interval 1      # redraw status line every second

setw -g mouse on
setw -g mode-keys vi
set -g default-terminal "screen-256color"
set -g window-size smallest

# enable activity alerts
setw -g monitor-activity on
set -g visual-activity on

set -g clock-mode-style 24

set -g status 'on'
set -g status-justify 'left'
set -g status-left-length '100'
set -g status-right-length '100'


pathOrName="#($HOME/.dotfiles/tmux/pathOrName.sh '#{pane_current_path}' '#W')"

lcarsDefaultBg=colour172
lcarsDefaultLightBg=colour179
lcarsDefaultLighterBg=colour222
lcarsDefaultFg=colour0
lcarsAccentBg=colour32
lcarsAccentFg=colour15

# TODO light theme
#lcarsDefaultBg=colour24
#lcarsDefaultLightBg=colour32
##lcarsDefaultLighterBg=colour29
#lcarsDefaultLighterBg=colour32
#lcarsDefaultFg=colour15
#lcarsAccentBg=colour172
#lcarsAccentFg=colour232

set -g clock-mode-colour $lcarsDefaultBg

set -g pane-border-style fg=colour244
set -g pane-active-border-style fg=$lcarsDefaultBg
set -g pane-border-lines 'heavy'

set -g message-style bg=$lcarsAccentBg,fg=$lcarsAccentFg,bold

set -g status-bg terminal

set-window-option -g window-active-style bg=terminal
set-window-option -g window-style bg=colour236

# TODO light theme
#set-window-option -g window-active-style bg=colour255,fg=colour238
#set-window-option -g window-style bg=colour252,fg=colour238

set-window-option -g window-status-activity-style fg=$lcarsDefaultBg,bg=$lcarsDefaultFg

set -g status-left "#[bg=$lcarsDefaultBg]#{?#{==:#{s/root//:client_key_table},manage_mode},#[fg=colour15#,bg=colour130#,bold] MANAGE,} "
set -g status-right "#[fg=$lcarsDefaultFg,bg=$lcarsDefaultBg]#($network) #[default] #[fg=$lcarsDefaultFg,bg=$lcarsDefaultLightBg] $date #[default] #[fg=$lcarsDefaultFg,bg=$lcarsDefaultLightBg] $time #[default] #($freeSpace) #[default] #($battery) "

set -g window-status-separator ""
set -g window-status-current-format " #[fg=$lcarsAccentFg,bg=$lcarsAccentBg,bold,fill=$lcarsDefaultBg]#{?window_zoomed_flag,[, }#I $pathOrName#{?window_zoomed_flag,], }#[default]#{?window_end_flag, ,}"
set -g window-status-format " #[fg=$lcarsDefaultFg,bg=$lcarsDefaultBg,fill=$lcarsDefaultBg]#{?window_zoomed_flag,[, }#I $pathOrName#{?window_zoomed_flag,], }#[default]#{?window_end_flag, ,}"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"

bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R


bind-key i copy-mode
bind-key -T copy-mode-vi J send-keys -X -N 3 scroll-down
bind-key -T copy-mode-vi K send-keys -X -N 3 scroll-up
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel $copyCmd
bind-key p run "tmux set-buffer \"$($pasteCmd)\"" \; paste-buffer
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle

# restore normal ctrl-l behaviour (clear console)
#unbind -T C-l
#unbind -n C-l

unbind m
bind m switch-client -T manage_mode

bind -T manage_mode h select-pane -L \; switch-client -T manage_mode
bind -T manage_mode j select-pane -D \; switch-client -T manage_mode
bind -T manage_mode k select-pane -U \; switch-client -T manage_mode
bind -T manage_mode l select-pane -R \; switch-client -T manage_mode

bind -T manage_mode z resize-pane -Z \; switch-client -T manage_mode

bind -T manage_mode K resize-pane -U \; switch-client -T manage_mode
bind -T manage_mode J resize-pane -D \; switch-client -T manage_mode
bind -T manage_mode H resize-pane -L \; switch-client -T manage_mode
bind -T manage_mode L resize-pane -R \; switch-client -T manage_mode

bind -T manage_mode p display-panes -d 0 \; switch-client -T manage_mode
bind -T manage_mode x kill-pane \; switch-client -T manage_mode
bind -T manage_mode - select-pane -l \; switch-client -T manage_mode         
bind -T manage_mode < swap-pane -U \; switch-client -T manage_mode
bind -T manage_mode > swap-pane -D \; switch-client -T manage_mode

bind -T manage_mode c new-window -n '' \; switch-client -T manage_mode
bind -T manage_mode Tab last-window \; switch-client -T manage_mode

bind -T manage_mode w choose-tree -Zs \; switch-client -T manage_mode
bind -T manage_mode C new-session -n '' \; switch-client -T manage_mode
bind -T manage_mode ( switch-client -p \; switch-client -T manage_mode
bind -T manage_mode ) switch-client -n \; switch-client -T manage_mode

bind -T manage_mode 1 select-window -t 1 \; switch-client -T manage_mode
bind -T manage_mode 2 select-window -t 2 \; switch-client -T manage_mode
bind -T manage_mode 3 select-window -t 3 \; switch-client -T manage_mode
bind -T manage_mode 4 select-window -t 4 \; switch-client -T manage_mode
bind -T manage_mode 5 select-window -t 5 \; switch-client -T manage_mode
bind -T manage_mode 6 select-window -t 6 \; switch-client -T manage_mode
bind -T manage_mode 7 select-window -t 7 \; switch-client -T manage_mode
bind -T manage_mode 8 select-window -t 8 \; switch-client -T manage_mode
bind -T manage_mode 9 select-window -t 9 \; switch-client -T manage_mode

bind -T manage_mode v split-window -h -c "#{pane_current_path}" \; switch-client -T manage_mode
bind -T manage_mode s split-window -v -c "#{pane_current_path}" \; switch-client -T manage_mode

