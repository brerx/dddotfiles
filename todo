g:Blubb = () => {
  const line = getline(".")
  const col = col(".")
  const i1 = line->stridx("'")
  const i2 = line->stridx("'", i1 + 1)
  const inString = col > i1 && col < i2
  echo inString
} 

Temp statusline for inspecting used highlight groups
let &statusline = ' %{synIDattr(synID(line("."),col("."),1),"name")} - %{synIDattr(synIDtrans(synID(line("."),col("."),1)),"name")} '

" TODO add " and `
function! Blubb(abbr, text)
  let line = getline(".")
  let col = col(".")
  let i1 = line->stridx("'")
  let i2 = line->stridx("'", i1 + 1)
  echo line . ", " . col . ", " . i1 . ", " . i2
  let inString = col > i1 && col < i2
  if inString
    return a:abbr
  else
    return a:text
  endif
endfunction

let hu = "it 'does' do\<cr>end\<esc>O" 
iab it <C-R>=Blubb("it", hu)<CR>

function! Ask(abbr,expansion,defprompt)
  let answer = confirm("Expand '" . a:abbr . "'?", "&Yes\n&No", a:defprompt)
  " testing against 1 and not 2, I correctly take care of <abort>
  return answer == 1 ? a:expansion : a:abbr
endfunction

iabbrev <expr> for Ask('for', "for () {\n}", 2)
