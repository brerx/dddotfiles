#!/usr/bin/env ruby
# frozen_string_literal: true

require 'English'
require 'yaml'

module Logger
  @level = 0

  def self.log(message)
    prefix = @level.zero? ? "\e[1;34m\u276f " : ''
    message = message.rjust(message.length + 2 * @level)
    puts "#{prefix}\e[0;34m#{message}\e[0m"

    return unless block_given?

    @level += 1
    yield
    @level -= 1
    @level = 0 if @level.negative?
  end

  def self.success(message)
    prefix = @level.zero? ? "\e[1;36m\u276f " : ''
    message = message.rjust(message.length + 2 * @level)
    puts "#{prefix}\e[0;36m#{message}\e[0m"
  end

  def self.error(message)
    prefix = @level.zero? ? "\e[1;31m\u276f " : ''
    message = message.rjust(message.length + 2 * @level)
    puts "#{prefix}\e[0;31m#{message}\e[0m"
  end
end

module OS
  def self.mac?
    (/darwin/ =~ RUBY_PLATFORM) != nil
  end

  def self.linux?
    (/linux/ =~ RUBY_PLATFORM) != nil
  end
end

class RebaseError < StandardError
  def initialize(branch)
    super("Rebase failed for #{branch}")
  end
end

class FastForwardError < StandardError
  def initialize(branch)
    super("Fast-forward merge failed for #{branch}")
  end
end

class CheckoutError < StandardError
  def initialize(branch)
    super("Checkout failed for #{branch}")
  end
end

MERGE_QUEUE_PATH = File.join(Dir.pwd, 'merge-queue.yaml')

# WIP

# NOTES
# Update n stacked branches to new master: git rebase --update-refs master
# See also https://adamj.eu/tech/2022/10/15/how-to-rebase-stacked-git-branches/
# Use rebase strategy to avoid conflict resolution if a branch earlier
# in the stack has been updated and push forced (vermutlich -X ours)
# Add shortcut to checkout branch by number, prev, next, etc.
# Update yaml when franch from the beginning of the stack are merged into master
# Using ours in the middle of conflict resolution: git checkout --ours file/path (geht auch fÃ¼r alles ohne specific file?)
# ! Vor update immer erst sync aufrufen
# When doing update make sure to fetch-merge/rebase all stacked branches as well
# in case you're pairing with someone and any of the stacked branches got some updates

command = ARGV[0]

def branch
  new_branch = ARGV[1]
  `git checkout -b #{new_branch}`
  File.write(MERGE_QUEUE_PATH, [*merge_queue, new_branch].to_yaml)
end

def pr
  current_branch = `git branch --show-current`.strip
  `git push --set-upstream origin #{current_branch}`
  `gh pr create --web --base #{parent_branch(current_branch)}`
end

def sync(start_index: 1)
  Logger.log 'Syncing stack' do
    current_branch = `git branch --show-current`.strip

    `git checkout #{merge_queue.last}`
    raise CheckoutError, merge_queue.last unless $CHILD_STATUS.success?

    `git rebase #{merge_queue.at(start_index)} --update-refs --autostash`
    raise RebaseError, merge_queue.at(start_index) unless $CHILD_STATUS.success?

    # Old approach by rebasing each branch on top of the previous one in a loop
    # merge_queue.drop(2).each do |branch|
    # `git checkout #{branch}`
    # raise CheckoutError, branch unless $CHILD_STATUS.success?

    # `git rebase #{parent_branch(branch)} --autostash`
    # raise RebaseError, branch unless $CHILD_STATUS.success?
    # end

    `git push --force-with-lease origin #{merge_queue.drop(1).join(' ')}`
    `git checkout #{current_branch}`

    Logger.success 'Done.'
  end
rescue StandardError => e
  Logger.error "#{e.message}, aborting"
end

# update to newest base (main/master)
def update
  Logger.log 'Updating base branch' do
    current_branch = `git branch --show-current`.strip

    `git checkout #{merge_queue.at(0)}`
    raise CheckoutError, merge_queue.at(0) unless $CHILD_STATUS.success?

    `git fetch origin #{merge_queue.at(0)}`
    `git merge --ff-only`
    raise FastForwardError, merge_queue.at(0) unless $CHILD_STATUS.success?

    `git checkout #{current_branch}`

    Logger.success 'Done.'
  end

  sync start_index: 0

  # Not needed when running sync, but
  # kept for doc reasons how rebase with --update-refs works
  #
  # `git checkout #{merge_queue.last}`
  # `git rebase --update-refs #{merge_queue.at(0)} --autostash` # -X ours?
  # raise RebaseError, merge_queue.at(0) unless $CHILD_STATUS.success?

  # `git push --force-with-lease origin #{merge_queue.drop(1).join(' ')}`
  # `git checkout #{current_branch}`
rescue StandardError => e
  Logger.error "#{e.message}, aborting"
end

def delete
  updated_merge_queue = merge_queue.drop(1).dup

  if ARGV[1].nil?
    current_branch = `git branch --show-current`.strip
    updated_merge_queue.delete(current_branch)
    Logger.success "Deleted #{current_branch}"
  else
    updated_merge_queue.delete_at(ARGV[1].to_i)
    Logger.success "Deleted #{merge_queue.drop(1).at(ARGV[1].to_i)}"
  end

  File.write(MERGE_QUEUE_PATH, ['main', *updated_merge_queue].to_yaml)
end

def c
  # TODO: Improve w/ shorthands:
  # - -> -1
  # + -> +1
  # -2 -3, ...
  # +2 +3, ...
  # 0, 1, 2, ...
  queue_without_base = merge_queue.drop(1)
  param = if ARGV[1] == 'prev'
            '-1'
          else
            ARGV[1] == 'next' ? '+1' : ARGV[1]
          end

  if param.start_with?(/\+|-/)
    current_branch = `git branch --show-current`.strip
    current_branch_index = queue_without_base.find_index(current_branch)
    `git checkout #{queue_without_base.at(current_branch_index + param.to_i)}`
  else
    `git checkout #{queue_without_base.at(param.to_i)}`
  end
end

# TODO: Reuse parent_branch method
def parent
  current_branch = `git branch --show-current`.strip
  current_branch_index = merge_queue.find_index(current_branch)

  if current_branch_index.zero?
    Logger.error 'Already at the beginning of the stack, aborting'
    return
  end

  puts merge_queue.at(current_branch_index - 1)
end

def open
  cmd = OS.linux? ? 'xdg-open' : 'open'
  remote = `git remote get-url origin`.strip
  org_and_repo = remote[/:(.*)\.git/, 1]

  merge_queue.drop(1).each do |branch|
    `#{cmd} https://github.com/#{org_and_repo}/pull/#{branch}`
  end
end

def init
  current_branch = `git branch --show-current`.strip
  File.write(MERGE_QUEUE_PATH, ['main', current_branch].to_yaml)
end

def merge_queue
  # TODO: cache file, avoid heavy IO
  return ['main'] unless File.exist?(MERGE_QUEUE_PATH)

  YAML.load_file(MERGE_QUEUE_PATH)
end

def parent_branch(branch_name)
  branch_index = merge_queue.index(branch_name)
  raise 'Branch not found' unless branch_index

  return merge_queue.at(branch_index - 1) if branch_index.positive?

  'main'
end

begin
  # Improve this, avoid send?
  # if command.start_with?(/\+|-/)
  # ARGV[1] = command
  # command = 'c'
  # end

  send(command)
rescue NoMethodError
  Logger.error 'Unknown command'
end
